import * as cron from 'node-cron';
import { RssScraper } from './rssScraper';

export class CronService {
    private rssScraper: RssScraper;

    constructor() {
        this.rssScraper = new RssScraper();
    }

    async initialize(): Promise<void> {
        try {
            // Kh·ªüi ƒë·ªông cronjob
            this.startCronJobs();
            console.log('‚úÖ ƒê√£ kh·ªüi ƒë·ªông cronjob service (RSS)');
        } catch (error) {
            console.error('‚ùå L·ªói khi kh·ªüi t·∫°o cron service:', error);
        }
    }

    private startCronJobs(): void {
        // Ch·∫°y m·ªói 1 ph√∫t (ho·∫∑c 30 ph√∫t tu·ª≥ ch·ªânh)
        cron.schedule('*/30 * * * *', async () => {
            console.log('‚è∞ Cronjob ch·∫°y - Thu th·∫≠p d·ªØ li·ªáu t·ª´ RSS Tu·ªïi Tr·∫ª');
            await this.rssScraper.scrapeAllFeeds();
        }, {
            timezone: "Asia/Ho_Chi_Minh"
        });

        // Ch·∫°y ngay khi kh·ªüi ƒë·ªông (t√πy ch·ªçn)
        // this.rssScraper.scrapeAllFeeds();
    }

    // H√†m ƒë·ªÉ ch·∫°y th·ªß c√¥ng
    async runScrapingManually(): Promise<void> {
        console.log('üîÑ Ch·∫°y thu th·∫≠p d·ªØ li·ªáu RSS th·ªß c√¥ng...');
        await this.rssScraper.scrapeAllFeeds();
    }

    // H√†m ƒë·ªÉ d·ª´ng t·∫•t c·∫£ cronjobs
    stopAllCronJobs(): void {
        cron.getTasks().forEach(task => task.stop());
        console.log('‚èπÔ∏è ƒê√£ d·ª´ng t·∫•t c·∫£ cronjobs');
    }
} 